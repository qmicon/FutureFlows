import { getGraph, getMarket } from "@/flow/scripts";
import { useSession } from "next-auth/react";
import Head from "next/head";
import React, { useCallback, useEffect, useState } from "react";
import Web3 from "web3";
import Navbar from "../../components/Navbar";
import { PortfolioMarketCard } from "../../components/PortfolioMarketCard";
import styles from "../styles/Home.module.css";

const Portfolio = () => {
  const {data: session} = useSession()
  const [markets, setMarkets] = useState([]);
  const [portfolioValue, setPortfolioValue] = useState(0);
  const [allQuestions, setAllQuestions] = useState([]);
  const [openPositions, setOpenPositions] = useState(0);

  const getMarkets = useCallback(async () => {
    var Questions = await getMarket();
    // for (var i = 0; i < totalQuestions; i++) {
    //   var questions = await futureFlows.methods
    //     .questions(i)
    //     .call({ from: account });
    //   allQuestions.push({
    //     id: questions.id,
    //     title: questions.question,
    //     imageHash: questions.creatorImageHash,
    //     totalAmount: questions.totalAmount,
    //     totalYes: questions.totalYesAmount,
    //     totalNo: questions.totalNoAmount,
    //     hasResolved: questions.eventCompleted,
    //     endTimestamp: questions.endTimestamp,
    //   });
    // }
    setAllQuestions(Questions)

    var dataArray = [];
    var totalPortValue = 0;
    for (var i = 0; i < Questions.length; i++) {
      var data = await getGraph(i)
      console.log(data, session)
      data["yesCount"].forEach((item) => {
        if (item["user"] == session?.user?.address) {
          dataArray.push({
            id: i.toString(),
            userYes: item["amount"].toString(),
            timestamp: item["timestamp"].toString(),
          });
          totalPortValue += parseInt(item["amount"]);
        }
      });
      data["noCount"].forEach((item) => {
        if (item["user"] == session?.user?.address) {
          dataArray.push({
            id: i.toString(),
            userNo: item["amount"].toString(),
            timestamp: item["timestamp"].toString(),
          });
          totalPortValue += parseInt(item["amount"]);
        }
      });
    }
    setPortfolioValue(totalPortValue);
    for (var i = 0; i < dataArray.length; i++) {
      var question = allQuestions.find((item) => item.id == dataArray[i].id);
      if(!question) return
      dataArray[i].title = question.question;
      dataArray[i].imageHash = question.imageHash;
      dataArray[i].totalAmount = question.totalAmount;
      dataArray[i].totalYes = question.totalYesCount;
      dataArray[i].totalNo = question.totalNoCount;
      dataArray[i].hasResolved = question.hasResolved;
      dataArray[i].endTimestamp = parseInt(question.endTimestamp)*1000;
    }
    setMarkets(dataArray);
  }, [session && session.user && allQuestions.length > 0]);

  useEffect(() => {
        getMarkets();
  }, [session && session.user && allQuestions.length > 0]);

  return (
    <div className={styles.container}>
      <Head>
        <title>FutureFlows</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Navbar />
      <main className="w-full flex flex-col sm:flex-row flex-wrap sm:flex-nowrap py-4 flex-grow max-w-5xl">
        <div className="w-full flex flex-col pt-1">
          <div className="p-10 bg-blue-700 rounded-lg flex flex-row justify-evenly">
            <div className="flex flex-col items-center">
              <h1 className="text-white opacity-50 text-lg">Portfolio Value</h1>
              <h1 className="text-white text-4xl font-bold">
                {portfolioValue.toString()} USDC
              </h1>
            </div>
          </div>
          <span className="font-bold my-3 text-lg">Your Market Positions</span>
          {markets.map((market) => (
            <PortfolioMarketCard
              id={market.id}
              title={market.title}
              imageHash={market.imageHash}
              totalAmount={market.totalAmount}
              totalYes={market.totalYes}
              totalNo={market.totalNo}
              userYes={market.userYes}
              userNo={market.userNo}
              key={market.id}
              hasResolved={market.hasResolved}
              timestamp={parseInt(market.timestamp)*1000}
              endTimestamp={market.endTimestamp}
            />
          ))}
        </div>
      </main>
    </div>
  );
};

export default Portfolio;
